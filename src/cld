#!/usr/bin/env python3

# REQUIRES PYTHON VERSION >3.12

#Interactive scipt to manage Rclone sync

import os
import subprocess
import sys
import yaml
import shutil
import datetime
import argparse
import time

#ANSI colors
YELLOW = "\033[33m"
BLUE = "\033[34m"
RED = "\033[31m"
GREEN = "\033[92m"
RESET = "\033[0m" #Reset default to color

#Get command user
USER = os.getlogin()

#PATHS
#Path of sync directory on local system
global_src_path = ""
#Path of sync directory on Google drive
global_dst_path = "/"
# Get the current working directory
CURRENT_DIR = os.getcwd()
#Cache directory
CACHE_DIR = f"/home/{USER}/.cache/cld/"
#Config directory
CONFIG_DIR = f"/home/{USER}/.config/cld/"

#REMOTES
#Personal Google drive remote name
global_personal_remote = ""


# Check if the python interpreter being used is tested
def check_py_version() -> None:
    # Flag variables
    supported_flag = False
    
    supported_versions = ["3.12"]
    version_info = sys.version.split() # index 0 is python version, 1 is install date, 2 is GCC version info.
    py_version = version_info[0] # Get python interpreter version

    for version in supported_versions:
        if version in py_version:
            supported_flag = True
            break
    
    if supported_flag == False:
        print(f"{YELLOW}Warning:{RESET} Using untested python version: {py_version}")
        print(f" -> Supported Python versions: {supported_versions}")


#Functions for information messages---------------------------------------------------------------------
def exit_codes():
    print("Exit codes for cld:")
    print("0 -- Command run successfully")
    print("2 -- Invalid arguments")
    print("1 -- General error")
    print("126 -- Shell command could not be run")
    print("127 -- Shell command does not exist in PATH")
    print("128 -- Internal fault")

#Functions for configuration----------------------------------------------------------------------------
def set_active_profile(profile_name: str) -> None:
    try:
        with open(f"{CONFIG_DIR}active_profile", "w") as file:
            file.write(profile_name)
    except Exception as e:
        print(f"{RED}Error, unable to save active profile.{RESET}")
        exit(128)


def get_active_profile() -> str:
    profile = ""

    if os.path.exists(f"{CONFIG_DIR}active_profile"):
        try:
            with open(f"{CONFIG_DIR}active_profile", "r") as file:
                profile = file.read()
                return profile
        except Exception as e:
            print(f"{RED}Error, unable to get active profile.{RESET}")
            exit(128)
    else: #Run make_config if active config does not exist
        print(f"{YELLOW}No active profile set!{RESET}")
        profile = input("Enter profile to set active: ")
        set_active_profile(profile)


def display_profiles() -> None:
    print("Available profiles:")
    for profile in os.listdir(f"{CONFIG_DIR}"):
        if "active_profile" not in profile:
            print(f" {profile}")


def make_or_remove_profile(operation: str) -> None:
    #Create CACHE and CONFIG directory if it does not exist
    if not os.path.exists(CACHE_DIR):
        os.mkdir(CACHE_DIR)
    if not os.path.exists(CONFIG_DIR):
        os.mkdir(CONFIG_DIR)

    #Variable declarations
    src_path = ""
    dst_path = ""
    personal_remote = ""
    profile_name = " "
    
    if operation == "make":
        #Input from user
        while " " in profile_name:
            print("Enter the name for the new profile.")
            profile_name = input(f"{YELLOW} Note: profile name may not have spaces{RESET}\n > ")
        src_path = input("Enter the absolute path of the local folder you wish to sync to: ")
        if src_path[-1] != "/":
            src_path = src_path + "/"
        dst_path = input("Enter the absolute path of the remote folder to sync from: ")
        if dst_path[-1] != "/":
            dst_path = dst_path + "/"
        personal_remote = input("Enter the name of your remote set in rclone: ")

        profile_data = {
            "src_path": src_path,
            "dst_path": dst_path,
            "personal_remote": personal_remote
        }

        #Save profile
        try:
            with open(f"{CONFIG_DIR}{profile_name}", "w") as file:
                yaml.dump(profile_data, file)
        except Exception as e:
            print(f"{RED}Error: Unable to save profile.\n E: {e}{RESET}")
            exit(126)

        try:
            os.mkdir(f"{CACHE_DIR}{profile_name}")
        except Exception as e:
            print(f"{RED}Error: Unable to create cache folder.\n E: {e}{RESET}")
            exit(126)

        #Set active profile to new profile
        set_active_profile(profile_name)

    elif operation == "remove":
        profile_name = input("Enter profile(name) to remove > ")
        #Check if directory exists
        if os.path.exists(f"{CONFIG_DIR}{profile_name}"):
            os.remove(f"{CONFIG_DIR}{profile_name}")
            print(f"{GREEN}Profile removed.{RESET}")
        else:
            print(f"{RED}The profile entered does not exist.{RESET}")
    else:
        print(f"{RED}Error, invalid parameter used in make_or_remove_profile{RESET}")
        exit(128)


def save_push_pull_dates(direction: str):
    # Get active profile
    try:
        active_profile = get_active_profile()
        print(f"{GREEN}ACTIVE PROFILE: {global_active_profile}{RESET}")
    except Exception as e:
        print(f"FATAL: Unable to fetch active profile! [cld::save_push_pull_dates]\n Err: {e}")
        exit(1)

    # Section for timestamp file handling
    # Get human readable timestamp
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %I:%M:%S %p")
    # Get time in epoch
    system_time_epoch = int(time.time())

    #load timestamp file if it exists
    if os.path.exists(f"{CACHE_DIR}/{get_active_profile()}/timestamp"):
        with open(f"{CACHE_DIR}/{get_active_profile()}/timestamp","r") as file:
            dates_data = yaml.safe_load(file)
    else:
        dates_data = {
            "last_pull": None,
            "last_push": None,
            "last_pull_epoch": None,
            "last_push_epoch": None
        }

    #Set new date
    if direction == "pull":
        dates_data["last_pull"] = current_time
        dates_data["last_pull_epoch"] = system_time_epoch
    elif direction == "push":
        dates_data["last_push"] = current_time
        dates_data["last_push_epoch"] = system_time_epoch
    else:
        print(f"{RED}Error, Invalid parameter sent to `save_push_pull_dates`\n Param sent: {direction}{RESET}")
        exit(128)

    #Save timestamp file
    try:
        with open(f"{CACHE_DIR}/{active_profile}/timestamp", "w") as file:
            yaml.dump(dates_data, file)
    except Exception as e:
        print(f"{RED}Error, Unable to save time data.\n E: {e}{RESET}")
        exit(126)

    #Section for moddate file handling
    #load moddate file if it exists
    if os.path.exists(f"{CACHE_DIR}/{active_profile}/moddate"):
        with open(f"{CACHE_DIR}/{get_active_profile()}/moddate","r") as file:
            last_mod_dates = yaml.safe_load(file)
    else:
        last_mod_dates = get_local_mod_dates()

    #Save moddate file
    try:
        with open(f"{CACHE_DIR}/{active_profile}/moddate", "w") as file:
            yaml.dump(last_mod_dates, file)
    except Exception as e:
        print(f"{RED}Error, Unable to save mod date data.[cld::save_push_pull_dates]\n E: {e}{RESET}")
        exit(126)


# Get function that returns history push and pull data
def get_last_push_pull() -> dict:
    # Get active profile
    try:
        active_profile = get_active_profile()
    except Exception as e:
        print(f"FATAL: Unable to fetch active profile! [cld::get_last_push_pull]\n Err: {e}")
        exit(1)
    dates_data = {}

    #Get time data from file
    if os.path.exists(f"{CACHE_DIR}/{active_profile}/timestamp"):
        with open(f"{CACHE_DIR}/{active_profile}/timestamp", "r") as file:
            dates_data = yaml.safe_load(file)
    else:
        dates_data = {
            "last_pull": None,
            "last_push": None,
            "last_pull_epoch": None,
            "last_push_epoch": None
        }

    return dates_data


# Print human readable dates for the last push and pull
def print_last_push_pull() -> None:
    dates_data = get_last_push_pull()
   
    #Display data
    print(f"Last cld pull: {YELLOW}{dates_data["last_pull"]}{RESET}")
    print(f"Last cld push: {YELLOW}{dates_data["last_push"]}{RESET}")


# Walk local file sync recursively to find file mod dates
def get_local_mod_dates() -> dict:
    local_mod_data = {}
    for root, dirs, files in os.walk(global_src_path):
        # root is the current directory path
        # dirs is the list of subdirectory names
        # files is the list of file names in the current directory

        for file in files:
            local_mod_data[file] = os.path.getmtime(f"{root}/{file}")
    
    return local_mod_data


# Print status of files since last push or pull
def status() -> None:
    # Get past dates of last push and pull
    history_dates_data = get_last_push_pull() 
    # Get current file modification dates
    local_dates_data = get_local_mod_dates()
    # Get the most recent push or pull epoch date
    last_pull_or_push_epoch = 0
    last_pull_or_push_stamp = ""
    if history_dates_data["last_pull_epoch"] >= history_dates_data["last_push_epoch"]:
        last_pull_or_push_epoch = history_dates_data["last_pull_epoch"]
        last_pull_or_push_stamp = history_dates_data["last_pull"]
    elif history_dates_data["last_push_epoch"] >= history_dates_data["last_pull_epoch"]:
        last_pull_or_push_epoch = history_dates_data["last_push_epoch"]
        last_pull_or_push_stamp = history_dates_data["last_push"]
    else:
        print(f"Err: last push and pull epoch dates are invalid! [cld::status]")
        exit(1)

    # Store file names that have been modified
    modified_file_list = {}

    local_filenames = local_dates_data.keys()
    for file in local_filenames:
        if local_dates_data[file] > last_pull_or_push_epoch:
            modified_file_list[file] = "MOD"

    # Load moddate file to find deleted files
    last_mod_dates = {}
    if os.path.exists(f"{CACHE_DIR}/moddate"):
        with open(f"{CACHE_DIR}/moddate","r") as file:
            last_mod_dates = yaml.safe_load(file)
    
    # Loop through moddate file to check for files that no longer exist
    for file in last_mod_dates.keys():
        if file not in local_dates_data.keys():
            modified_file_list[file] = "DEL"

    # Print modified files
    if len(modified_file_list) > 0:
        print(f"\nLast push/pull date: {last_pull_or_push_stamp}")
        print(f"Files that have been {YELLOW}modified{RESET}/{RED}removed{RESET} since last push/pull:")
        for file in modified_file_list.keys():
            if modified_file_list[file] == "MOD":
                print(f" {YELLOW}** {file}{RESET}")
            elif modified_file_list[file] == "DEL":
                print(f" {RED}-- {file}{RESET}")
        print("\n")
    else:
        print(f"{GREEN}All files are up to date!{RESET}")


def get_profile() -> bool:
    #Global variable declarations
    global global_src_path
    global global_dst_path 
    global global_personal_remote
    global global_active_profile
    
    #Get active profile
    global_active_profile = get_active_profile()

    if os.path.exists(f"{CONFIG_DIR}/{global_active_profile}"):
        with open(f"{CONFIG_DIR}/{global_active_profile}", "r") as file:
            profile_data = yaml.safe_load(file)

        global_src_path = profile_data["src_path"]
        global_dst_path = profile_data["dst_path"]
        global_personal_remote = profile_data["personal_remote"]

        return True #Return true if config is found
    else:
        return False #Return false if config is not found


def delete_all_data():
    try:
        if os.path.exists(CACHE_DIR):
            shutil.rmtree(CACHE_DIR)
        if os.path.exists(CONFIG_DIR):
            shutil.rmtree(CONFIG_DIR)

        print("DATA HAS BEEN REMOVED")
    except Exception as e:
        print(f"{RED}Error, Unable to delete data.\n E: {e}{RESET}")
        exit(126)


#Functions for one-way syncing--------------------------------------------------------
#Get and print changes that will be made to files if rclone sync is used   
def print_changes(direction: str, verbose: bool):
    #commands
    rclone_check_command = f"rclone check {global_src_path} {global_personal_remote}:{global_dst_path} --missing-on-dst {CACHE_DIR}tmp-dst --missing-on-src {CACHE_DIR}tmp-src --differ={CACHE_DIR}tmp-dif --fast-list"
    #Runtime variables
    result = ""
    missing_on_dst = []
    missing_on_src = []
    diff = []

    #Get file changes
    try:
        result = subprocess.run(
            rclone_check_command, 
            capture_output=True, 
            text=True,
            shell=True,
            )
        if verbose == True:
            if len(result.stdout) != 0:
                print(f"\n{YELLOW} --- Rclone output: --- {RESET}")
                print(f"{result.stdout}")
                print(f"\n{YELLOW} --- ----- --- {RESET}")
            if len(result.stderr) != 0:
                print(f"\n{YELLOW} --- Rclone errors: --- {RESET}")
                print(f"{RED}{result.stderr}{RESET}\n")
                print(f"\n{YELLOW} --- ----- --- {RESET}")

    except Exception as e:
        print(f"{RED}Error: Unable to get rclone check against destination.\n E: {e}{RESET}")
        exit(126)
    
    #Read and store directory differences between source and remote
    try:
        with open(f"{CACHE_DIR}tmp-dif", "r") as file:
            for line in file:
                line = line.rstrip("\n")
                diff.append(line)
        os.remove(f"{CACHE_DIR}tmp-dif")
    except Exception as e:
        print(f"{RED}Error: Unable to open/read tmp-dif file.\n E: {e}{RESET}")
        exit(126)

    try:
        with open(f"{CACHE_DIR}tmp-dst", "r") as file:
            for line in file:
                line = line.rstrip("\n")
                missing_on_dst.append(line)
        os.remove(f"{CACHE_DIR}tmp-dst")
    except Exception as e:
        print(f"{RED}Error: Unable to open/read tmp-dst file.\n E: {e}{RESET}")
        exit(126)

    try:
        with open(f"{CACHE_DIR}tmp-src", "r") as file:
            for line in file:
                line = line.rstrip("\n")
                missing_on_src.append(line)
        os.remove(f"{CACHE_DIR}tmp-src")
    except Exception as e:
        print(f"{RED}Error: Unable to open/read tmp-src file.\n E: {e}{RESET}")
        exit(126)

    #Print file changes with respect to instance that is being synced to
    if direction == "pull":
        print(f"File {GREEN}ADD{RESET}/{RED}REMOVE{RESET}/{YELLOW}MODIFY{RESET} made to source(system):")
        if len(missing_on_dst) > 0 or len(missing_on_src) > 0:
            for file_name in missing_on_dst:
                print(f"{RED} -- {file_name}{RESET}")
            for file_name in missing_on_src:
                print(f"{GREEN} ++ {file_name}{RESET}")
            for file_name in diff:
                print(f"{YELLOW} ** {file_name}{RESET}")
        else:
            print(f"{GREEN} None; local and remote match.{RESET}")
    
    elif direction == "push":
        print(f"File {GREEN}ADD{RESET}/{RED}REMOVE{RESET}/{YELLOW}MODIFY{RESET} made to remote(cloud):")
        if len(missing_on_dst) > 0 or len(missing_on_src) > 0:
            for file_name in missing_on_dst:
                print(f"{GREEN} ++ {file_name}{RESET}")
            for file_name in missing_on_src:
                print(f"{RED} -- {file_name}{RESET}")
            for file_name in diff:
                print(f"{YELLOW} ** {file_name}{RESET}")
        else:
            print(f"{GREEN} None; local and remote match.{RESET}")
        
    else:
        print(f"{RED}Error, invalid direction argument sent to print_changes(){RESET}")


#Handles the rclone sync command
def rclone_sync(direction: str, verbose: bool): #direction can be 'push' or 'pull'
    #commands
    rclone_pull_command = f"rclone sync {global_personal_remote}:{global_dst_path} {global_src_path} -P"
    rclone_push_command = f"rclone sync {global_src_path} {global_personal_remote}:{global_dst_path} -P"
    #runtime variables
    choice = ""
    result = ""

    #Print directory differences with respect to the directory being synced
    print(f"{GREEN}ACTIVE PROFILE: {global_active_profile}{RESET}")
    print_changes(direction, verbose)

    if direction == "pull":
        choice = input("\nWould you like to continue with sync pull?(y/N): ")
        if choice == "y":
            print("Working...")
            try:
                #Source and dest flipped as the local folder is the temporary destination
                result = subprocess.run(
                    rclone_pull_command, 
                    capture_output=True,
                    text=True,
                    shell=True,
                    )
                if verbose == True:
                    if len(result.stdout) != 0:
                        print(f"\n{YELLOW} --- Rclone output: --- {RESET}")
                        print(f"{result.stdout}")
                        print(f"\n{YELLOW} --- ----- --- {RESET}")
                    if len(result.stderr) != 0:
                        print(f"\n{YELLOW} --- Rclone errors: --- {RESET}")
                        print(f"{RED}{result.stderr}{RESET}\n")
                        print(f"\n{YELLOW} --- ----- --- {RESET}")

                save_push_pull_dates("pull")
                print("Done.")
            except Exception as e:
                print("{RED}Error: Unable to pull with rclone.\n E: {e}{RESET}")
                exit(126)
        else:
            print("Sync canceled")
    elif direction == "push":
        choice = input("\nWould you like to continue with sync push?(y/N): ")
        if choice == "y":
            print("Working...")
            try:
                result = subprocess.run(
                    rclone_push_command, 
                    capture_output=True,
                    text=True,
                    shell=True,
                    )
                if verbose == True:
                    if len(result.stdout) != 0:
                        print(f"\n{YELLOW} --- Rclone output: --- {RESET}")
                        print(f"{result.stdout}")
                        print(f"\n{YELLOW} --- ----- --- {RESET}")
                    if len(result.stderr) != 0:
                        print(f"\n{YELLOW} --- Rclone errors: --- {RESET}")
                        print(f"{RED}{result.stderr}{RESET}\n")
                        print(f"\n{YELLOW} --- ----- --- {RESET}")

                save_push_pull_dates("push")
                print("Done.")
            except Exception as e:
                print("{RED}Error: Unable to pull with rclone.\n E: {e}{RESET}")
                exit(126)
        else:
            print("Sync canceled")
    else:
        print("{RED}Error, Invalid direction argument given to rclone-sync(){RESET}")


def main():
    # Check if Python interpreter version is supported
    check_py_version()

    #Variables
    flags = []
    true_flags = 0

    #Set up parser module with command arguments
    parser = argparse.ArgumentParser(description="cld script")

    #Initialize parser arguments
    parser.add_argument("--setup", action="store_true", help="Initial setup for cld.")
    parser.add_argument("--pull", action="store_true", help="Perform Rclone sync against the local system.")
    parser.add_argument("--push", action="store_true", help="Perform Rclone sync against remote.")
    parser.add_argument("--status", action="store_true", help="Show files updated since last push/pull.")
    parser.add_argument("--history", action="store_true", help="Show last pull or push dates.")
    parser.add_argument("--delete-all-data", action="store_true", help="Delete all profile and cache created by cld.")
    parser.add_argument("--codes", action="store_true", help="Show error code table.")
    parser.add_argument("--verbose", action="store_true", help="Show verbose output.")
    parser.add_argument("--set-profile", type=str, help="Set default profile.")
    parser.add_argument("--list-profiles", action="store_true", help="List available profiles.")
    parser.add_argument("--add-profile", action="store_true", help="Create a new profile.")
    parser.add_argument("--active-profile", action="store_true", help="View currently active profile")
    parser.add_argument("--remove-profile", action="store_true", help="Remove a profile")

    #Process arguments
    args = parser.parse_args()

    #Flags do not include verbose arg in total count as it can be used with all args
    flags = [
        args.pull, 
        args.push, 
        args.history, 
        args.delete_all_data, 
        args.codes,
        args.list_profiles,
        args.add_profile,
        args.remove_profile,
        args.active_profile,
        args.setup,
        args.status
    ]
    true_flags = sum(flags)

    if true_flags == 1:
        if args.setup == True:
            make_or_remove_profile("make")
        elif args.pull == True:
            profile_found = get_profile() 
            if profile_found == False:
                print(f"{RED}Error, could not get current profile.{RESET}")
                print(f"{YELLOW} If this is a fresh install of cld, run '--add-profile'{RESET}")
                print(f"{YELLOW} Set a new profile with '--set-profile'.{RESET}")
                exit(0)
            rclone_sync(direction="pull", verbose=args.verbose)
        elif args.push == True:
            profile_found = get_profile() 
            if profile_found == False:
                print(f"{RED}Error, could not get current profile.{RESET}")
                print(f"{YELLOW} If this is a fresh install of cld, run '--add-profile'{RESET}")
                print(f"{YELLOW} Set a new profile with '--set-profile'.{RESET}")
                exit(0)
            rclone_sync(direction="push", verbose=args.verbose)
        elif args.active_profile == True:
            profile_found = get_profile() 
            if profile_found == False:
                print(f"{RED}Error, could not get current profile.{RESET}")
                print(f"{YELLOW} If this is a fresh install of cld, run '--add-profile'{RESET}")
                print(f"{YELLOW} Set a new profile with '--set-profile'.{RESET}")
                exit(0)
            else:
                print(f"Active Profile -> {global_active_profile}")
        elif args.delete_all_data == True:
            delete_all_data()
        elif args.history == True:
            print_last_push_pull()
        elif args.list_profiles == True:
            display_profiles()
        elif args.add_profile == True:
            make_or_remove_profile("make")
        elif args.remove_profile == True:
            display_profiles()
            make_or_remove_profile("remove")
        elif args.status == True:
            profile_found = get_profile() 
            if profile_found == False:
                print(f"{RED}Error, could not get current profile.{RESET}")
                print(f"{YELLOW} If this is a fresh install of cld, run '--add-profile'{RESET}")
                print(f"{YELLOW} Set a new profile with '--set-profile'.{RESET}")
                exit(0)
            else:
                status()
        elif args.codes == True:
            exit_codes()
        
    elif true_flags == 0:
        if args.set_profile != None:
            set_active_profile(args.set_profile)
    
    else:
        print(f"{YELLOW}Invalid arguments used with cld. Run 'cld --help' for help.{RESET}")
        exit(2)


main()